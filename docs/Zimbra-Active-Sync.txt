Zimbra Network Edition ActiveSync Implementation

  Origins and Development

  The Java-based ActiveSync implementation in Zimbra Network Edition was developed by VMware/Zimbra after they acquired Zimbra in 2010. However, the roots go
  deeper:

  1. Initial Development: The ActiveSync support was likely developed internally by Zimbra/VMware engineers, not acquired from a third party
  2. Commercial Strategy: It was positioned as a key differentiator between the open-source and commercial editions
  3. Timeline: ActiveSync support was added to Network Edition around 2011-2012 timeframe

  Technical Architecture

  Based on what's publicly known:

  // Zimbra's Java ActiveSync is integrated into the core Zimbra server
  // Located in: zimbra-store/src/java/com/zimbra/cs/service/activesync/
  // Key components:
  - ActiveSyncServlet.java         // Main servlet handling ActiveSync requests
  - FolderSyncHandler.java         // Folder hierarchy management  
  - SyncHandler.java               // Message/item synchronization
  - WBXMLProcessor.java            // Binary XML processing
  - StateManager.java              // Sync state persistence

  Key Differences from Z-Push

  | Aspect           | Zimbra Network Edition   | Z-Push                 |
  |------------------|--------------------------|------------------------|
  | Language         | Java (integrated)        | PHP (external)         |
  | Architecture     | Built into Zimbra server | Standalone middleware  |
  | State Management | Database-integrated      | File-based             |
  | Performance      | Optimized for Zimbra     | Translation overhead   |
  | Folder Handling  | Native Zimbra APIs       | SOAP API calls         |
  | Memory Usage     | Shared JVM resources     | Separate PHP processes |

  Why Zimbra Chose Java Implementation

  1. Integration: Direct access to Zimbra's internal APIs and data structures
  2. Performance: No SOAP overhead, direct database access
  3. Scalability: Leverages Zimbra's existing Java infrastructure
  4. State Management: Uses Zimbra's database for sync state (not files)
  5. Commercial Strategy: Significant engineering investment to justify Network Edition pricing

  Technical Advantages of Zimbra's Implementation

  // Direct access to Zimbra internals
  public class ZimbraActiveSyncHandler {

      // No SOAP calls needed - direct database access
      public List<Folder> getFolderHierarchy(Account account) {
          Mailbox mbox = MailboxManager.getInstance().getMailboxByAccount(account);
          return mbox.getFolderList(null); // Direct mailbox access
      }

      // Integrated state management
      public void updateSyncState(Device device, String folderId, int syncKey) {
          // Stores state in Zimbra's MySQL database, not files
          DbConnection conn = DbPool.getConnection();
          // Transactional state updates
      }
  }

  Likely Development Team

  The ActiveSync implementation was probably developed by:
  - Zimbra's Core Engineering Team (not outsourced)
  - Focus on Mobile Team within Zimbra/VMware
  - Led by senior engineers familiar with Exchange ActiveSync protocol
  - Collaboration with Microsoft for protocol compliance (ActiveSync is Microsoft's protocol)

  Why Not Open Source?

  1. Revenue Model: Key differentiator for Network Edition sales
  2. Microsoft Licensing: ActiveSync protocol licensing costs
  3. Competitive Advantage: Against Exchange and other commercial solutions
  4. Support Costs: Commercial customers expect enterprise-grade support

  Current Status

  As of my last knowledge:
  - Synacor acquired Zimbra from VMware in 2017
  - ActiveSync remains a Network Edition exclusive feature
  - Z-Push continues to be the primary open-source solution
  - Market Position: Zimbra competes with Office 365/Exchange Online

  Performance Comparison Implications

  Given this architecture, Zimbra's Java ActiveSync likely handles large folder hierarchies much better than Z-Push because:

  // Zimbra can do this efficiently:
  public FolderSyncResponse getFolderChanges(String syncKey) {
      // Direct SQL query to Zimbra's database
      String sql = "SELECT folder_id, mod_sequence, name FROM folder_changes WHERE mod_seq > ?";
      // Returns only changed folders, not entire hierarchy

      // Integrated with Zimbra's change notification system
      // No external API calls, no file I/O for state management
  }

  While Z-Push must:
  // Z-Push has to do this:
  public function GetHierarchy() {
      $soap_request = $this->buildFolderRequest(); // Network call
      $response = $this->soapCall($zimbra_server);  // Network overhead
      $folders = $this->parseAllFolders($response); // Process all 15,000 folders
      return $folders; // Return everything
  }

  Speculation on Implementation Details

  Based on typical enterprise ActiveSync implementations:
  - Protocol Compliance: Full ActiveSync 14.1/16.0 support
  - Device Policies: Enterprise device management features
  - Security: Integrated with Zimbra's authentication and security model
  - Monitoring: Built-in ActiveSync usage reporting and monitoring
  - Optimization: Direct access to Zimbra's caching and optimization systems

  This explains why organizations with large folder hierarchies often choose Zimbra Network Edition over Z-Push - the Java implementation has fundamental
  architectural advantages for enterprise-scale deployments.


